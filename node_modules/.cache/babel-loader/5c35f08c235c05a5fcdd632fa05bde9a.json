{"ast":null,"code":"var _jsxFileName = \"D:\\\\StarWarApiZQ\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Header from \"./components/Header\";\nimport './components/Header.css';\nimport HomePage from './components/HomePage';\nimport './components/HomePage.css';\nimport CardPage from './components/CardPage';\nimport './components/CardPage.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //api data for all the cards\n  const [peopleData, setPeopleData] = useState([]);\n  const [planetData, setPlanetData] = useState([]);\n\n  const loadAllPeople = async () => {\n    await axios.get('https://swapi.dev/api/people').then(response => {\n      var peopleCopy = response.data.results;\n      let promises = [];\n\n      for (let person of peopleCopy) {\n        promises.push( //homeworld call (get the names from given api call)\n        axios.get(person.homeworld).then(response => {\n          person.homeworld = response.data.name;\n        }), //species call (get the names from given api call)\n        person.species.length > 0 ? axios.get(person.species[0]).then(response => {\n          person.species = response.data.name;\n        }) : person.species = 'Human');\n      } //waits until all http requests have been loaded properly one by one\n\n\n      Promise.all(promises).then(() => {\n        setPeopleData(peopleCopy);\n      });\n    }).catch(error => {\n      alert('error loading data');\n    });\n  };\n\n  const loadAllPlanets = async () => {\n    await axios.get('https://swapi.dev/api/planets').then(response => {\n      var planetCopy = response.data.results;\n      let promises = [];\n\n      for (let planet of planetCopy) {\n        promises.push( //residents call (get the names from given api call)\n        planet.residents.length > 0 ? axios.get(planet.residents[0]).then(response => {\n          person.residents = response.data.name;\n        }) : person.species = 'No Residents');\n      } //waits until all http requests have been loaded properly one by one\n\n\n      Promise.all(promises).then(() => {\n        setPlanetData(planetCopy);\n      });\n    }).catch(error => {\n      alert('error loading data');\n    });\n  }; //loads the card data when app is launched and updates the homeworld and species names then set the data to peopleData state\n\n\n  useEffect(() => {\n    loadAllPeople();\n    loadAllPlanets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-body\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {\n            peopleData: peopleData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:id\",\n          element: /*#__PURE__*/_jsxDEV(CardPage, {\n            peopleData: peopleData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c9PaZSaGTe6GpDwAPsDmn7FpI10=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","HomePage","CardPage","BrowserRouter","Route","Routes","axios","useEffect","useState","App","peopleData","setPeopleData","planetData","setPlanetData","loadAllPeople","get","then","response","peopleCopy","data","results","promises","person","push","homeworld","name","species","length","Promise","all","catch","error","alert","loadAllPlanets","planetCopy","planet","residents"],"sources":["D:/StarWarApiZQ/src/App.js"],"sourcesContent":["import './App.css';\nimport Header from \"./components/Header\";\nimport './components/Header.css';\nimport HomePage from './components/HomePage';\nimport './components/HomePage.css';\nimport CardPage from './components/CardPage';\nimport './components/CardPage.css';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  //api data for all the cards\n  const [peopleData,setPeopleData] = useState([]);\n  const [planetData,setPlanetData] = useState([]);\n\n  const loadAllPeople= async ()=>{\n    await axios.get('https://swapi.dev/api/people')\n      .then((response)=>{\n        var peopleCopy = response.data.results;\n        let promises = [];\n        for(let person of peopleCopy){\n          promises.push(\n            //homeworld call (get the names from given api call)\n            axios.get(person.homeworld)\n              .then((response)=>{\n                person.homeworld = response.data.name;\n              }),\n            //species call (get the names from given api call)\n            person.species.length > 0 ?\n              axios.get(person.species[0])\n                .then((response)=>{\n                  person.species = response.data.name;\n                })\n            : person.species = 'Human'\n          )\n        }\n        //waits until all http requests have been loaded properly one by one\n        Promise.all(promises).then(() => {setPeopleData(peopleCopy)});\n      })\n      .catch((error)=>{\n        alert('error loading data')\n      })\n  }\n\n  const loadAllPlanets= async ()=>{\n    await axios.get('https://swapi.dev/api/planets')\n      .then((response)=>{\n        var planetCopy = response.data.results;\n        let promises = [];\n        for(let planet of planetCopy){\n          promises.push(            \n            //residents call (get the names from given api call)\n            planet.residents.length > 0 ?\n              axios.get(planet.residents[0])\n                .then((response)=>{\n                  person.residents = response.data.name;\n                })\n            : person.species = 'No Residents'\n          )\n        }\n        //waits until all http requests have been loaded properly one by one\n        Promise.all(promises).then(() => {setPlanetData(planetCopy)});\n      })\n      .catch((error)=>{\n        alert('error loading data')\n      })\n  }\n\n  //loads the card data when app is launched and updates the homeworld and species names then set the data to peopleData state\n  useEffect(()=>{\n    loadAllPeople();\n    loadAllPlanets();\n  },[]);\n  \n  return (\n    <BrowserRouter>\n      <div className='page-body'>\n        <Header />\n        <Routes>\n          <Route path=\"/\" element={<HomePage peopleData={peopleData}/>}/>\n          <Route path=\"/:id\" element={<CardPage peopleData={peopleData}/>} />\n        </Routes>   \n      </div> \n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}